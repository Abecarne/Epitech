#!/usr/bin/env python3
##
## EPITECH PROJECT, 2020
## B-MAT-100-LIL-1-1-103cipher-anthony.becarne
## File description:
## 103cipher
##

import sys
from math import *

def help():
    print("USAGE\n    ./103cipher message key flag")
    print("\nDESCRIPTION\n    message     a message, made of ASCII characters")
    print("    key         the encryption key, made of ASCII characters")
    print("    flag        0 for the message to be encrypted, 1 to be decrypted")

def init_matrice(matrice):
    if len(sys.argv[2]) == 1:
        for _ in range(len(sys.argv[1])):
            matrice.append([0])
    elif (len(sys.argv[2]) >= 2 and len(sys.argv[2]) <= 4):
        for _ in range(len(sys.argv[1]) // 2):
            matrice.append([0, 0])
    else:
        for _ in range((len(sys.argv[1]) // 3) + 1):
            matrice.append([0, 0, 0])
    return matrice

def init_key(key):
    if len(sys.argv[2]) == 1:
        key.append([0])
    elif (len(sys.argv[2]) >= 2 and len(sys.argv[2]) < 5):
        for _ in range(2):
            key.append([0, 0])
    else:
        for _ in range(3):
            key.append([0, 0, 0])
    return key

def calcul_matrice(key, phrase, reponse, taille):
    for i in range((len(sys.argv[1]) // taille) + 1):
        for j in range(taille):
            for k in range(taille):
                reponse[i][j] += key[k][j] * phrase[i][k]
    return reponse

def fill_key(key, taille):
    compteur = 0
    for i in key:
        for j in range(taille):
            if compteur > (len(sys.argv[2]) - 1):
                break
            i[j] = ord(sys.argv[2][compteur])
            compteur += 1
    return key

def fill_matrice(matrice, taille):
    compteur = 0
    for i in matrice:
        for j in range(taille):
            if compteur > (len(sys.argv[1]) - 1):
                break
            i[j] = ord(sys.argv[1][compteur])
            compteur += 1
    return matrice

def display_crypted(key, reponse, taille, status):
    if len(sys.argv[2]) == 4:
        status -= 1
    if len(sys.argv[2]) == 5:
        status += 1
    if len(sys.argv[2]) == 9:
        status -= 1
    print("Key matrix:")
    for i in range((len(sys.argv[2]) // taille) + status):
        for j in range(taille):
            if j == taille - 1:
                print(key[i][j])
            else:
                print(key[i][j], end = "\t")
    print("")
    if len(sys.argv[2]) == 2 or len(sys.argv[2]) == 3 or len(sys.argv[2]) == 5:
        status -= 1
    if len(sys.argv[2]) == 9:
        status += 1
    print("Encrypted message:")
    for i in range((len(sys.argv[1]) // taille) + status):
        for j in range(taille):
            if ((i == (len(sys.argv[1]) // taille) - 1) and (j == taille - 1)) and len(sys.argv[2]) < 5:
                print(reponse[i][j])
            elif (i == len(sys.argv[1]) // taille) and (j == taille - 1):
                print(reponse[i][j])
            elif (i == len(sys.argv[1]) - 1 // taille) and len(sys.argv[2]) == 1:
                print(reponse[i][j])
            else:
                print(reponse[i][j], end = " ")

def crypted():
    taille = 0
    if len(sys.argv[2]) == 1:
        taille = 1
    elif (len(sys.argv[2]) >= 2) and (len(sys.argv[2]) < 5):
        taille = 2
    else:
        taille = 3
    key_matrice = []
    key_matrice.append(init_key(key_matrice))
    key_matrice = fill_key(key_matrice, taille)
    phrase = []
    phrase.append(init_matrice(phrase))
    phrase = fill_matrice(phrase, taille)
    reponse = []
    reponse.append(init_matrice(reponse))
    reponse = calcul_matrice(key_matrice, phrase, reponse, taille)
    if taille == 3 or taille == 2:
        display_crypted(key_matrice, reponse, taille, 1)
    else:
        display_crypted(key_matrice, reponse, taille, 0)

def determinant(key, taille):
    if taille == 3:
        co1 = ((key[1][1] * key[2][2]) - (key[1][2] * key[2][1])) * key[0][0]
        co2 = ((key[1][0] * key[2][2]) - (key[1][2] * key[2][0])) * -(key[0][1])
        co3 = ((key[1][0] * key[2][1]) - (key[1][1] * key[2][0])) * key[0][2]
        det = co1 + co2 + co3
    elif taille == 2:
        det = key[0][0] * key[1][1] - key[0][1] * key[1][0]
    else:
        return key[0][0]
    return det

def transposition(key, taille):
    if taille == 3:
        buff = 0
        buff = key[0][1]
        key[0][1] = key[1][0]
        key[1][0] = buff
        buff = key[0][2]
        key[0][2] = key[2][0]
        key[2][0] = buff
        buff = key[1][2]
        key[1][2] = key[2][1]
        key[2][1] = buff
    if taille == 2:
        buff = key[0][0]
        key[0][0] = key[1][1]
        key[1][1] = buff
    return key

def adj(key, taille):
    adj_key = []
    if taille == 3:
        adj_key = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
        adj_key[0][0] = (key[1][1] * key[2][2]) - (key[1][2] * key[2][1])
        adj_key[0][1] = ((key[1][0] * key[2][2]) - (key[1][2] * key[2][0])) * -1
        adj_key[0][2] = (key[1][0] * key[2][1]) - (key[1][1] * key[2][0])
        adj_key[1][0] = ((key[0][1] * key[2][2]) - (key[0][2] * key[2][1])) * -1
        adj_key[1][1] = (key[0][0] * key[2][2]) - (key[0][2] * key[2][0])
        adj_key[1][2] = ((key[0][0] * key[2][1]) - (key[0][1] * key[2][0])) * -1
        adj_key[2][0] = (key[0][1] * key[1][2]) - (key[0][2] * key[1][1])
        adj_key[2][1] = ((key[0][0] * key[1][2]) - (key[0][2] * key[1][0])) * -1
        adj_key[2][2] = (key[0][0] * key[1][1]) - (key[0][1] * key[1][0])
    elif taille == 2:
        adj_key = [[0, 0], [0, 0]]
        adj_key[0][0] = key[0][0]
        adj_key[0][1] = -key[0][1]
        adj_key[1][0] = -key[1][0]
        adj_key[1][1] = key[1][1]
    return adj_key

def matrice_decrypt(key, det, taille):
    if taille == 3:
        matrice_sortie = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    elif taille == 2:
        matrice_sortie = [[0, 0], [0, 0]]
    else:
        matrice_sortie = [0]
    for i in range(taille):
        for j in range(taille):
            matrice_sortie[i][j] = float(key[i][j]) / det
    return matrice_sortie


def crypted_message(message, taille):
    liste = list(sys.argv[1].split(' '))
    compteur = 0
    nb_space = 1
    for i in range(len(sys.argv[1])):
        if sys.argv[1][i] == ' ':
            nb_space += 1
    for i in  range(nb_space // taille):
        if taille == 1:
            message.append([0])
        if taille == 2:
            message.append([0, 0])
        if taille == 3:
            message.append([0, 0, 0])
    for i in message:
        for j in range(taille):
            if compteur > nb_space - 1:
                break
            i[j] = liste[compteur]
            compteur += 1
    return message

def decrypt_calcul(key, phrase, reponse, taille):
    nb_space = 1

    for i in range(len(sys.argv[1]) ):
        if sys.argv[1][i] == ' ':
            nb_space += 1
    for i in range(nb_space // taille):
        for j in range(taille):
            for k in range(taille):
                reponse[i][j] += float(key[k][j]) * float(phrase[i][k])
            if int(reponse[i][j]) == 31:
                reponse[i][j] = 32
            if reponse[i][j] - int(reponse[i][j]) > 0.8:
                reponse[i][j] = int(reponse[i][j]) + 1
            else:
                reponse[i][j] = int(reponse[i][j])
    return reponse

def display_decrypted(key, reponse, taille, status):
    if len(sys.argv[2]) == 4:
        status -= 1
    if len(sys.argv[2]) == 5:
        status += 1
    if len(sys.argv[2]) == 9:
        status -= 1
    print("Key matrix :")
    for i in range((len(sys.argv[2]) // taille) + status):
        for j in range(taille):
            if j == taille - 1:
                print(key[i][j])
            else:
                print(key[i][j], end = "\t")
    print("")
    print("Decrypted message:")
    print(reponse)

def init_final_matrice(matrice):
    if len(sys.argv[2]) == 1:
        for _ in range(len(sys.argv[1])):
            matrice.append([0.0])
    elif (len(sys.argv[2]) >= 2 and len(sys.argv[2]) <= 4):
        for _ in range(len(sys.argv[1]) // 2):
            matrice.append([0.0, 0.0])
    else:
        for _ in range((len(sys.argv[1]) // 3) + 1):
            matrice.append([0.0, 0.0, 0.0])
    return matrice

def decrypted():
    taille = 0
    if len(sys.argv[2]) == 1:
        taille = 1
    elif (len(sys.argv[2]) >= 2) and (len(sys.argv[2]) < 5):
        taille = 2
    else:
        taille = 3
    message = []
    key_matrice = []
    final_matrice = []
    final_matrice.append(init_final_matrice(final_matrice))
    key_matrice.append(init_key(key_matrice))
    key_matrice = fill_key(key_matrice, taille)
    message = crypted_message(message, taille)
    det = determinant(key_matrice, taille)
    if det == 0:
        sys.stderr.write("Error, the key can't be used (det = 0)\n")
        sys.exit(84)
    key_matrice = transposition(key_matrice, taille)
    key_matrice = adj(key_matrice, taille)
    key_matrice = matrice_decrypt(key_matrice, det, taille)
    for i in range(len(key_matrice)):
        for j in range(taille):
            key_matrice[i][j] = round(key_matrice[i][j], 7)
    final_matrice = decrypt_calcul(key_matrice, message, final_matrice, taille)
    resultat = ""
    for i in range(len(final_matrice) - 1):
        for j in range(taille):
            if final_matrice[i][j] >= 32:
                resultat += chr(final_matrice[i][j])
    if taille == 2 or taille == 3:
        display_decrypted(key_matrice, resultat, taille, 1)
    else:
        display_decrypted(key_matrice, resultat, taille, 0)

def main():
    if len(sys.argv) != 4:
        sys.exit(84)
    if len(sys.argv) == 2 and sys.argv[1] == "-h":
        help()
        sys.exit(0)
    if len(sys.argv[2]) > 9 or len(sys.argv[2]) == 0:
        sys.stderr.write("Error, wrong key size\n")
        sys.exit(84)
    if len(sys.argv[1]) < len(sys.argv[2]):
        sys.stderr.write("Error, wrong information (to be crypted or decrypted) size\n")
        sys.exit(84)
    if (sys.argv[3] == '1'):
        decrypted()
    if (sys.argv[3] == '0'):
        crypted()
    else:
        sys.exit(84)

if __name__ == "__main__":
    main()